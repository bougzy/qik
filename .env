PORT=3000
MONGO_URI=mongodb+srv://fam:fam@fam.n6mni5x.mongodb.net/fam
SESSION_SECRET=C8cN0LASdG







# please ensure that the error invalid email or password is corrected in the code below and users are able to login successfully in const Property = require('../models/Property');

# // Get all properties
# exports.getAllProperties = async (req, res) => {
#   try {
#     const properties = await Property.find();
#     res.json(properties);
#   } catch (err) {
#     res.status(500).json({ message: err.message });
#   }
# };

# // Get a single property by ID
# exports.getPropertyById = async (req, res) => {
#   try {
#     const property = await Property.findById(req.params.id);
#     if (!property) return res.status(404).json({ message: 'Property not found' });
#     res.json(property);
#   } catch (err) {
#     res.status(500).json({ message: err.message });
#   }
# };

# // Create a new property
# exports.createProperty = async (req, res) => {
#   try {
#     const { title, description, address, localGovernment } = req.body;
#     const images = req.files['images'] ? req.files['images'].map(file => file.path) : [];
#     const videos = req.files['videos'] ? req.files['videos'].map(file => file.path) : [];
#     const property = new Property({ title, description, address, localGovernment, images, videos, userId: req.user.id });
#     await property.save();
#     res.status(201).json({ success: true, message: 'Property created' });
#   } catch (err) {
#     res.status(400).json({ success: false, message: err.message });
#   }
# };

# // Update an existing property
# exports.updateProperty = async (req, res) => {
#   try {
#     const { title, description, address, localGovernment } = req.body;
#     const images = req.files['images'] ? req.files['images'].map(file => file.path) : [];
#     const videos = req.files['videos'] ? req.files['videos'].map(file => file.path) : [];
    
#     const property = await Property.findById(req.params.id);
#     if (!property) return res.status(404).json({ message: 'Property not found' });

#     property.title = title;
#     property.description = description;
#     property.address = address;
#     property.localGovernment = localGovernment;
#     property.images = images.length > 0 ? images : property.images;
#     property.videos = videos.length > 0 ? videos : property.videos;

#     await property.save();
#     res.json({ success: true, message: 'Property updated' });
#   } catch (err) {
#     res.status(400).json({ success: false, message: err.message });
#   }
# };

# // Delete a property
# exports.deleteProperty = async (req, res) => {
#   try {
#     const property = await Property.findById(req.params.id);
#     if (!property) return res.status(404).json({ message: 'Property not found' });

#     await property.remove();
#     res.json({ success: true, message: 'Property deleted' });
#   } catch (err) {
#     res.status(500).json({ message: err.message });
#   }
# };
# // controllers/userController.js

# const User = require('../models/User');
# const bcrypt = require('bcryptjs');
# const jwt = require('jsonwebtoken');
# const Property = require('../models/Property');

# // Register a new user
# exports.registerUser = async (req, res) => {
#   try {
#     const { name, email, password } = req.body;
#     const hashedPassword = await bcrypt.hash(password, 10);
#     const user = new User({ name, email, password: hashedPassword });
#     await user.save();
#     res.status(201).json({ success: true, message: 'User registered' });
#   } catch (err) {
#     res.status(400).json({ success: false, message: err.message });
#   }
# };

# // Log in an existing user
# exports.loginUser = async (req, res) => {
#   try {
#     const { email, password } = req.body;
#     const user = await User.findOne({ email });
#     if (!user) {
#       return res.status(400).json({ success: false, message: 'Invalid email or password' });
#     }

#     const isMatch = await bcrypt.compare(password, user.password);
#     if (!isMatch) {
#       return res.status(400).json({ success: false, message: 'Invalid email or password' });
#     }

#     const token = jwt.sign({ id: user._id }, process.env.SESSION_SECRET, { expiresIn: '1h' });
#     res.cookie('jwt', token, { httpOnly: true, maxAge: 3600000 });
#     res.json({ success: true, message: 'Logged in successfully' });
#   } catch (err) {
#     res.status(500).json({ success: false, message: err.message });
#   }
# };

# // Log out the current user
# exports.logoutUser = (req, res) => {
#   res.cookie('jwt', '', { maxAge: 1 });
#   res.redirect('/login');
# };

# // Get the current user's dashboard
# exports.getUserDashboard = async (req, res) => {
#   try {
#     const properties = await Property.find({ userId: req.user.id });
#     res.render('dashboard', { properties });
#   } catch (err) {
#     res.status(500).json({ message: err.message });
#   }
# };
# const jwt = require('jsonwebtoken');
# const User = require('../models/User');
# const Property = require('../models/Property');

# // Middleware to check if user is authenticated
# const requireAuth = (req, res, next) => {
#   const token = req.cookies.jwt;
  
#   if (token) {
#     jwt.verify(token, process.env.SESSION_SECRET, (err, decodedToken) => {
#       if (err) {
#         console.log(err.message);
#         res.redirect('/login');
#       } else {
#         req.user = decodedToken;
#         next();
#       }
#     });
#   } else {
#     res.redirect('/login');
#   }
# };

# // Middleware to check property ownership
# const checkPropertyOwnership = async (req, res, next) => {
#   try {
#     const property = await Property.findById(req.params.id);
#     if (property.userId.toString() === req.user.id) {
#       next();
#     } else {
#       res.status(403).json({ message: 'Unauthorized' });
#     }
#   } catch (err) {
#     res.status(500).json({ message: err.message });
#   }
# };

# module.exports = { requireAuth, checkPropertyOwnership };
# const mongoose = require('mongoose');

# const propertySchema = new mongoose.Schema({
#   title: {
#     type: String,
#     required: true,
#   },
#   description: {
#     type: String,
#     required: true,
#   },
#   address: {
#     type: String,
#     required: true,
#   },
#   localGovernment: {
#     type: String,
#     required: true,
#   },
#   images: [String],
#   videos: [String],
#   userId: {
#     type: mongoose.Schema.Types.ObjectId,
#     ref: 'User',
#     required: true,
#   },
# }, { timestamps: true });

# module.exports = mongoose.model('Property', propertySchema);
# const mongoose = require('mongoose');
# const bcrypt = require('bcryptjs');

# const userSchema = new mongoose.Schema({
#   name: {
#     type: String,
#     required: true,
#     trim: true,
#   },
#   email: {
#     type: String,
#     required: true,
#     unique: true,
#     trim: true,
#     lowercase: true,
#   },
#   password: {
#     type: String,
#     required: true,
#   },
# }, { timestamps: true });

# // Hash the password before saving the user
# userSchema.pre('save', async function(next) {
#   if (this.isModified('password') || this.isNew) {
#     const salt = await bcrypt.genSalt(10);
#     this.password = await bcrypt.hash(this.password, salt);
#   }
#   next();
# });

# // Compare input password with hashed password
# userSchema.methods.comparePassword = function(password) {
#   return bcrypt.compare(password, this.password);
# };

# module.exports = mongoose.model('User', userSchema);
# const express = require('express');
# const router = express.Router();
# const multer = require('multer');
# const path = require('path');
# const { requireAuth } = require('../middleware/authMiddleware');
# const {
#   getAllProperties,
#   getPropertyById,
#   createProperty,
#   updateProperty,
#   deleteProperty
# } = require('../controllers/propertyController');

# // Multer setup for file uploads
# const storage = multer.diskStorage({
#   destination: function (req, file, cb) {
#     cb(null, 'uploads/');
#   },
#   filename: function (req, file, cb) {
#     cb(null, Date.now() + path.extname(file.originalname));
#   }
# });
# const upload = multer({ storage: storage });

# router.get('/', getAllProperties);
# router.get('/:id', getPropertyById);
# router.post('/', requireAuth, upload.fields([{ name: 'images' }, { name: 'videos' }]), createProperty);
# router.put('/:id', requireAuth, upload.fields([{ name: 'images' }, { name: 'videos' }]), updateProperty);
# router.delete('/:id', requireAuth, deleteProperty);

# module.exports = router;
# const express = require('express');
# const router = express.Router();
# const {
#   registerUser,
#   loginUser,
#   logoutUser,
#   getUserDashboard
# } = require('../controllers/userController');
# const { requireAuth } = require('../middleware/authMiddleware');

# router.post('/register', registerUser);
# router.post('/login', loginUser);
# router.get('/logout', logoutUser);
# router.get('/dashboard', requireAuth, getUserDashboard);

# module.exports = router;
# const express = require('express');
# const mongoose = require('mongoose');
# const methodOverride = require('method-override');
# const path = require('path');
# const dotenv = require('dotenv');
# const propertyRoutes = require('./routes/propertyRoutes');
# const userRoutes = require('./routes/userRoutes');
# const { requireAuth } = require('./middleware/authMiddleware');

# // Load environment variables from .env file
# dotenv.config();

# // Create Express app
# const app = express();

# // Connect to MongoDB
# mongoose.connect(process.env.MONGO_URI, {
#   useNewUrlParser: true,
#   useUnifiedTopology: true,
#   useFindAndModify: false,
#   useCreateIndex: true,
# }).then(() => {
#   console.log('MongoDB connected');
# }).catch(err => {
#   console.error('MongoDB connection error:', err);
# });

# // Middleware
# app.use(express.json());
# app.use(express.urlencoded({ extended: true }));
# app.use(methodOverride('_method'));
# app.use(express.static(path.join(__dirname, 'public')));

# // Routes
# app.use('/properties', propertyRoutes);
# app.use('/users', userRoutes);

# // Home route
# app.get('/', (req, res) => {
#   res.sendFile(path.join(__dirname, 'views', 'index.html'));
# });

# // Start the server
# const PORT = process.env.PORT || 3000;
# app.listen(PORT, () => {
#   console.log(`Server is running on port ${PORT}`);
# });
# <!DOCTYPE html>
# <html lang="en">
# <head>
#   <meta charset="UTF-8">
#   <meta name="viewport" content="width=device-width, initial-scale=1.0">
#   <title>Property Listings</title>
#   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
#   <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
#     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
#     <link rel="stylesheet" href="/css/styles.css">

#     <style>
#         body {
#             font-family: 'Roboto', sans-serif;
#         }
        
#         .custom-carousel .carousel-inner {
#             max-height: 500px; 
#             overflow: hidden;
#         }
#         .custom-carousel .carousel-item img {
#             object-fit: cover; 
#             height: 100%;
#             width: 100%;
#         }
#     </style>

# </head>
# <body>
  


#   <nav class="navbar navbar-expand-lg navbar-light bg-primary">
#     <a class="navbar-brand text-white" href="/">Real Estate App</a>
#     <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
#         <span class="navbar-toggler-icon"></span>
#     </button>
#     <div class="collapse navbar-collapse text-white" id="navbarNav">
#         <ul class="navbar-nav ml-auto">
#             <li class="nav-item active">
#                 <a class="nav-link text-white" href="/">Home</a>
#             </li>
#             <li class="nav-item">
#                 <a class="nav-link text-white" href="/users/login.html">Login</a>
#             </li>
#             <li class="nav-item">
#                 <a class="nav-link text-white" href="/users/register.html">Register</a>
#             </li>
#         </ul>
#     </div>
# </nav>

# <div id="carouselExampleIndicators" class="carousel slide custom-carousel" data-ride="carousel">
#     <ol class="carousel-indicators">
#         <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
#         <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
#         <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
#     </ol>
#     <div class="carousel-inner">
#         <div class="carousel-item active">
#             <img class="d-block w-100" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSNk5IBHjY2-fBUW5UnFMCICh8L8fBEN-Sp853TFfKY8aLeCnZBwgPKenNPHPZYFBuhx_U&usqp=CAU" alt="Beautiful Family House">
#             <div class="carousel-caption d-none d-md-block">
#                 <h5>Beautiful Family House</h5>
#                 <p>Located in the suburbs</p>
#             </div>
#         </div>
#         <div class="carousel-item">
#             <img class="d-block w-100" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQOoCIB7qgtez_y3ky2l3P1FdQHZKl9qXpgGJI9Cj1-rDNOyVWK7kDuuHXZM6vgGz6jG0s&usqp=CAU" alt="Modern Apartment">
#             <div class="carousel-caption d-none d-md-block">
#                 <h5>Modern Apartment</h5>
#                 <p>In the heart of the city</p>
#             </div>
#         </div>
#         <div class="carousel-item">
#             <img class="d-block w-100" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQpSnGCCmhLDOr1CVpyWtyi1Uc5fmvaNsRZQIl4hXMIyb7abxI0CUfrJlcNyjfVkAUo2o8&usqp=CAU" alt="Cozy Cottage">
#             <div class="carousel-caption d-none d-md-block">
#                 <h5>Cozy Cottage</h5>
#                 <p>Perfect for a weekend getaway</p>
#             </div>
#         </div>
#     </div>
#     <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
#         <span class="carousel-control-prev-icon" aria-hidden="true"></span>
#         <span class="sr-only">Previous</span>
#     </a>
#     <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
#         <span class="carousel-control-next-icon" aria-hidden="true"></span>
#         <span class="sr-only">Next</span>
#     </a>
# </div>


# <div class="hero-section bg-primary text-white text-center py-5">
#     <div class="container">
#         <h4 class="display-4">Find Your Dream Home</h4>
#         <p class="lead">Explore the best properties in your area</p>
#         <a href="#property-list" class="btn btn-light btn-lg">Browse Listings</a>
#     </div>
# </div>


#   <div class="container mt-5">
#     <h1>Available Properties</h1>
#     <div id="property-list" class="row">
#       <!-- Property cards will be dynamically inserted here -->
#     </div>
#   </div>

#   <footer class="footer mt-auto py-3 bg-light">
#     <div class="container">
#       <span class="text-muted">© 2024 Property Listings</span>
#     </div>
#   </footer>

#   <script>
#     // Fetch and display properties
#     fetch('/properties')
#       .then(response => response.json())
#       .then(properties => {
#         const propertyList = document.getElementById('property-list');
#         properties.forEach(property => {
#           const propertyCard = document.createElement('div');
#           propertyCard.className = 'col-md-4';
#           propertyCard.innerHTML = `
#             <div class="card mb-4">
#               <img src="${property.images[0]}" class="card-img-top" alt="${property.title}">
#               <div class="card-body">
#                 <h5 class="card-title">${property.title}</h5>
#                 <p class="card-text">${property.description}</p>
#                 <button class="btn btn-primary" onclick="showMoreInfo('${property._id}')">More Info</button>
#               </div>
#             </div>
#           `;
#           propertyList.appendChild(propertyCard);
#         });
#       });

#     function showMoreInfo(propertyId) {
#       fetch(`/properties/${propertyId}`)
#         .then(response => response.json())
#         .then(property => {
#           const modalBody = document.getElementById('modal-body');
#           modalBody.innerHTML = `
#             <h5>${property.title}</h5>
#             <p>${property.description}</p>
#             <p>Address: ${property.address}</p>
#             <p>Local Government: ${property.localGovernment}</p>
#             <div>
#               <h6>Images:</h6>
#               ${property.images.map(image => `<img src="${image}" class="img-fluid mb-2">`).join('')}
#             </div>
#             <div>
#               <h6>Videos:</h6>
#               ${property.videos.map(video => `<video src="${video}" class="img-fluid mb-2" controls></video>`).join('')}
#             </div>
#           `;
#           $('#propertyModal').modal('show');
#         });
#     }
#   </script>

#   <!-- Modal -->
#   <div class="modal fade" id="propertyModal" tabindex="-1" aria-labelledby="propertyModalLabel" aria-hidden="true">
#     <div class="modal-dialog">
#       <div class="modal-content">
#         <div class="modal-header">
#           <h5 class="modal-title" id="propertyModalLabel">Property Details</h5>
#           <button type="button" class="close" data-dismiss="modal" aria-label="Close">
#             <span aria-hidden="true">&times;</span>
#           </button>
#         </div>
#         <div class="modal-body" id="modal-body">
#           <!-- More info will be dynamically inserted here -->
#         </div>
#         <div class="modal-footer">
#           <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
#         </div>
#       </div>
#     </div>
#   </div>

#   <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
#   <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
# </body>
# </html>
# <!DOCTYPE html>
# <html lang="en">
# <head>
#   <meta charset="UTF-8">
#   <meta name="viewport" content="width=device-width, initial-scale=1.0">
#   <title>Dashboard</title>
#   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
# </head>
# <body>
#   <nav class="navbar navbar-expand-lg navbar-light bg-light">
#     <a class="navbar-brand" href="/">Property Listings</a>
#     <div class="collapse navbar-collapse">
#       <ul class="navbar-nav ml-auto">
#         <li class="nav-item">
#           <a class="nav-link" href="/users/uploadProperty.html">Upload Property</a>
#         </li>
#         <li class="nav-item">
#           <a class="nav-link" href="/users/editProperty.html">Edit Property</a>
#         </li>
#         <li class="nav-item">
#           <a class="nav-link" href="#" onclick="logout()">Logout</a>
#         </li>
#       </ul>
#     </div>
#   </nav>
#   <div class="container mt-5">
#     <h1>My Dashboard</h1>
#     <h2>My Properties</h2>
#     <div id="my-properties" class="row">
#       <!-- User's properties will be dynamically inserted here -->
#     </div>
#   </div>

#   <footer class="footer mt-auto py-3 bg-light">
#     <div class="container">
#       <span class="text-muted">© 2024 Property Listings</span>
#     </div>
#   </footer>

#   <script>
#     // Fetch and display user's properties
#     fetch('/properties/my')
#       .then(response => response.json())
#       .then(properties => {
#         const propertyList = document.getElementById('my-properties');
#         properties.forEach(property => {
#           const propertyCard = document.createElement('div');
#           propertyCard.className = 'col-md-4';
#           propertyCard.innerHTML = `
#             <div class="card mb-4">
#               <img src="${property.images[0]}" class="card-img-top" alt="${property.title}">
#               <div class="card-body">
#                 <h5 class="card-title">${property.title}</h5>
#                 <p class="card-text">${property.description}</p>
#                 <button class="btn btn-primary" onclick="editProperty('${property._id}')">Edit</button>
#                 <button class="btn btn-danger" onclick="deleteProperty('${property._id}')">Delete</button>
#               </div>
#             </div>
#           `;
#           propertyList.appendChild(propertyCard);
#         });
#       });

#     function editProperty(propertyId) {
#       window.location.href = `/users/editProperty.html?id=${propertyId}`;
#     }

#     function deleteProperty(propertyId) {
#       if (confirm('Are you sure you want to delete this property?')) {
#         fetch(`/properties/${propertyId}`, { method: 'DELETE' })
#           .then(response => response.json())
#           .then(data => {
#             if (data.success) {
#               alert('Property deleted successfully');
#               window.location.reload();
#             } else {
#               alert(data.message);
#             }
#           });
#       }
#     }

#     function logout() {
#       fetch('/users/logout')
#         .then(response => response.json())
#         .then(data => {
#           if (data.success) {
#             alert('Logged out successfully');
#             window.location.href = '/users/login.html';
#           } else {
#             alert(data.message);
#           }
#         });
#     }
#   </script>
# </body>
# </html>
# <!DOCTYPE html>
# <html lang="en">
# <head>
#   <meta charset="UTF-8">
#   <meta name="viewport" content="width=device-width, initial-scale=1.0">
#   <title>Edit Property</title>
#   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
# </head>
# <body>
#   <nav class="navbar navbar-expand-lg navbar-light bg-light">
#     <a class="navbar-brand" href="/">Property Listings</a>
#   </nav>
#   <div class="container mt-5">
#     <h1>Edit Property</h1>
#     <form id="edit-property-form">
#       <input type="hidden" id="property-id">
#       <div class="form-group">
#         <label for="title">Title</label>
#         <input type="text" id="title" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="description">Description</label>
#         <textarea id="description" class="form-control" rows="3" required></textarea>
#       </div>
#       <div class="form-group">
#         <label for="address">Address</label>
#         <input type="text" id="address" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="localGovernment">Local Government</label>
#         <input type="text" id="localGovernment" class="form-control" required>
#       </div>
#       <button type="submit" class="btn btn-primary">Save Changes</button>
#     </form>
#   </div>

#   <footer class="footer mt-auto py-3 bg-light">
#     <div class="container">
#       <span class="text-muted">© 2024 Property Listings</span>
#     </div>
#   </footer>

#   <script>
#     const urlParams = new URLSearchParams(window.location.search);
#     const propertyId = urlParams.get('id');

#     // Fetch property details and populate the form
#     fetch(`/properties/${propertyId}`)
#       .then(response => response.json())
#       .then(property => {
#         document.getElementById('property-id').value = property._id;
#         document.getElementById('title').value = property.title;
#         document.getElementById('description').value = property.description;
#         document.getElementById('address').value = property.address;
#         document.getElementById('localGovernment').value = property.localGovernment;
#       });

#     document.getElementById('edit-property-form').addEventListener('submit', function(event) {
#       event.preventDefault();
      
#       const propertyId = document.getElementById('property-id').value;
#       const title = document.getElementById('title').value;
#       const description = document.getElementById('description').value;
#       const address = document.getElementById('address').value;
#       const localGovernment = document.getElementById('localGovernment').value;

#       fetch(`/properties/${propertyId}`, {
#         method: 'PUT',
#         headers: {
#           'Content-Type': 'application/json'
#         },
#         body: JSON.stringify({ title, description, address, localGovernment })
#       })
#       .then(response => response.json())
#       .then(data => {
#         if (data.success) {
#           alert('Property updated successfully');
#           window.location.href = '/users/dashboard.html';
#         } else {
#           alert(data.message);
#         }
#       });
#     });
#   </script>
# </body>
# </html>
# <!DOCTYPE html>
# <html lang="en">
# <head>
#   <meta charset="UTF-8">
#   <meta name="viewport" content="width=device-width, initial-scale=1.0">
#   <title>Login</title>
#   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
#   <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
#   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
#   <link rel="stylesheet" href="/css/styles.css">

# </head>
# <body>
#   <nav class="navbar navbar-expand-lg navbar-light bg-primary">
#     <a class="navbar-brand text-white" href="/">Real Estate App</a>
#     <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
#         <span class="navbar-toggler-icon"></span>
#     </button>
#     <div class="collapse navbar-collapse text-white" id="navbarNav">
#         <ul class="navbar-nav ml-auto">
#             <li class="nav-item active">
#                 <a class="nav-link text-white" href="/">Home</a>
#             </li>
#             <li class="nav-item">
#                 <a class="nav-link text-white" href="/users/login.html">Login</a>
#             </li>
#             <li class="nav-item">
#                 <a class="nav-link text-white" href="/users/register.html">Register</a>
#             </li>
#         </ul>
#     </div>
# </nav>
#   <div class="container mt-5">
#     <h1>Login</h1>
#     <form id="login-form">
#       <div class="form-group">
#         <label for="email">Email</label>
#         <input type="email" id="email" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="password">Password</label>
#         <input type="password" id="password" class="form-control" required>
#       </div>
#       <button type="submit" class="btn btn-primary">Login</button>
#     </form>
#   </div>

#   <footer class="footer mt-auto py-3 bg-light">
#     <div class="container">
#       <span class="text-muted">© 2024 Property Listings</span>
#     </div>
#   </footer>

#   <script>
#     document.getElementById('login-form').addEventListener('submit', function(event) {
#       event.preventDefault();
      
#       const email = document.getElementById('email').value;
#       const password = document.getElementById('password').value;

#       fetch('/users/login', {
#         method: 'POST',
#         headers: {
#           'Content-Type': 'application/json'
#         },
#         body: JSON.stringify({ email, password })
#       })
#       .then(response => response.json())
#       .then(data => {
#         if (data.success) {
#           alert('Logged in successfully');
#           window.location.href = '/users/dashboard';
#         } else {
#           alert(data.message);
#         }
#       });
#     });
#   </script>
# </body>
# </html>
# <!DOCTYPE html>
# <html lang="en">
# <head>
#   <meta charset="UTF-8">
#   <meta name="viewport" content="width=device-width, initial-scale=1.0">
#   <title>Register</title>
#   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
#   <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
#   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
#   <link rel="stylesheet" href="/css/styles.css">

# </head>
# <body>
#   <nav class="navbar navbar-expand-lg navbar-light bg-primary">
#     <a class="navbar-brand text-white" href="/">Real Estate App</a>
#     <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
#         <span class="navbar-toggler-icon"></span>
#     </button>
#     <div class="collapse navbar-collapse text-white" id="navbarNav">
#         <ul class="navbar-nav ml-auto">
#             <li class="nav-item active">
#                 <a class="nav-link text-white" href="/">Home</a>
#             </li>
#             <li class="nav-item">
#                 <a class="nav-link text-white" href="/users/login.html">Login</a>
#             </li>
#             <li class="nav-item">
#                 <a class="nav-link text-white" href="/users/register.html">Register</a>
#             </li>
#         </ul>
#     </div>
# </nav>
#   <div class="container mt-5">
#     <h1>Register</h1>
#     <form id="register-form">
#       <div class="form-group">
#         <label for="name">Name</label>
#         <input type="text" id="name" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="email">Email</label>
#         <input type="email" id="email" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="password">Password</label>
#         <input type="password" id="password" class="form-control" required>
#       </div>
#       <button type="submit" class="btn btn-primary">Register</button>
#     </form>
#   </div>

#   <footer class="footer mt-auto py-3 bg-light">
#     <div class="container">
#       <span class="text-muted">© 2024 Property Listings</span>
#     </div>
#   </footer>

#   <script>
#     document.getElementById('register-form').addEventListener('submit', function(event) {
#       event.preventDefault();
      
#       const name = document.getElementById('name').value;
#       const email = document.getElementById('email').value;
#       const password = document.getElementById('password').value;

#       fetch('/users/register', {
#         method: 'POST',
#         headers: {
#           'Content-Type': 'application/json'
#         },
#         body: JSON.stringify({ name, email, password })
#       })
#       .then(response => response.json())
#       .then(data => {
#         if (data.success) {
#           alert('Registered successfully');
#           window.location.href = '/users/login.html';
#         } else {
#           alert(data.message);
#         }
#       });
#     });
#   </script>
# </body>
# </html>
# <!DOCTYPE html>
# <html lang="en">
# <head>
#   <meta charset="UTF-8">
#   <meta name="viewport" content="width=device-width, initial-scale=1.0">
#   <title>Upload Property</title>
#   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
# </head>
# <body>
#   <nav class="navbar navbar-expand-lg navbar-light bg-light">
#     <a class="navbar-brand" href="/">Property Listings</a>
#   </nav>
#   <div class="container mt-5">
#     <h1>Upload Property</h1>
#     <form id="upload-property-form" enctype="multipart/form-data">
#       <div class="form-group">
#         <label for="title">Title</label>
#         <input type="text" id="title" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="description">Description</label>
#         <textarea id="description" class="form-control" rows="3" required></textarea>
#       </div>
#       <div class="form-group">
#         <label for="address">Address</label>
#         <input type="text" id="address" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="localGovernment">Local Government</label>
#         <input type="text" id="localGovernment" class="form-control" required>
#       </div>
#       <div class="form-group">
#         <label for="images">Images</label>
#         <input type="file" id="images" class="form-control-file" multiple required>
#       </div>
#       <div class="form-group">
#         <label for="videos">Videos</label>
#         <input type="file" id="videos" class="form-control-file" multiple>
#       </div>
#       <button type="submit" class="btn btn-primary">Upload Property</button>
#     </form>
#   </div>

#   <footer class="footer mt-auto py-3 bg-light">
#     <div class="container">
#       <span class="text-muted">© 2024 Property Listings</span>
#     </div>
#   </footer>

#   <script>
#     document.getElementById('upload-property-form').addEventListener('submit', function(event) {
#       event.preventDefault();

#       const formData = new FormData();
#       formData.append('title', document.getElementById('title').value);
#       formData.append('description', document.getElementById('description').value);
#       formData.append('address', document.getElementById('address').value);
#       formData.append('localGovernment', document.getElementById('localGovernment').value);

#       const imageFiles = document.getElementById('images').files;
#       for (let i = 0; i < imageFiles.length; i++) {
#         formData.append('images', imageFiles[i]);
#       }

#       const videoFiles = document.getElementById('videos').files;
#       for (let i = 0; i < videoFiles.length; i++) {
#         formData.append('videos', videoFiles[i]);
#       }

#       fetch('/properties/upload', {
#         method: 'POST',
#         body: formData
#       })
#       .then(response => response.json())
#       .then(data => {
#         if (data.success) {
#           alert('Property uploaded successfully');
#           window.location.href = '/users/dashboard.html';
#         } else {
#           alert(data.message);
#         }
#       });
#     });
#   </script>
# </body>
# </html>
